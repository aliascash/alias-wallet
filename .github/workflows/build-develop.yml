name: Develop
on:
  push:
    branches:
      - githubActionsRefactoring
      - develop
      - master
jobs:
  # ==========================================================================
  # Create Github tag/release and export short SHA of current HEAD
  prepareRelease:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      github_sha_short: ${{ steps.slug.outputs.sha8 }}
      alias_release: ${{ steps.determine_release.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v1
      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S')"
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Set Alias release/tag name
        id: determine_release
        run: |
          if [[ ${{ steps.extract_branch.outputs.branch }} = master ]] ; then
              majorVersion=$(grep CLIENT_VERSION_MAJOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              minorVersion=$(grep CLIENT_VERSION_MINOR ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              bugfixVersion=$(grep CLIENT_VERSION_REVISION ${{ github.workspace }}/CMakeLists.txt | head -n1 | cut -d ' ' -f2 | sed 's/)//g' | tr -d '\\n' | tr -d '\\r' | sed 's/ //g')
              echo "::set-output name=alias_release::$(printf '%s.%s.%s' $majorVersion $minorVersion $bugfixVersion)"
          else
              echo "::set-output name=alias_release::Build${{ github.run_number }}"
          fi
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.determine_release.outputs.alias_release }}-${{ steps.slug.outputs.sha8 }}
          release_name: "Build #${{ github.run_number }}"
          body: |
            Build #${{ github.run_number }} from ${{ steps.date.outputs.date }}
            - tbd: Artifact checksums
          draft: false
          prerelease: true

  # ==========================================================================
  # Build all x86 Linux flavours
  buildLinux:
    runs-on: ubuntu-latest
    needs: prepareRelease
    strategy:
      matrix:
        distro: [ CentOS/Dockerfile, Debian/Dockerfile_Buster, Debian/Dockerfile_Stretch, Fedora/Dockerfile, OpenSUSE/Dockerfile, Ubuntu/Dockerfile_18_04, Ubuntu/Dockerfile_20_04 ]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Build docker images
        run: >
          docker build
          -t local
          -f Docker/${{ matrix.distro }}
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build aarch64 version (Raspberry PI ARMv8)
  buildARM:
    runs-on: ubuntu-latest
    needs: prepareRelease
    strategy:
      matrix:
        distro: [ RaspberryPi/Dockerfile_Buster]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64
      - name: Build docker images
        run: >
          docker build
          -t local
          -f Docker/${{ matrix.distro }}
          --build-arg BUILD_THREADS=2
          --build-arg GITHUB_CI_TOKEN=${{ secrets.GITHUB_TOKEN }}
          --build-arg GIT_COMMIT=${{ needs.prepareRelease.outputs.github_sha_short }}
          --build-arg ALIAS_RELEASE=${{ needs.prepareRelease.outputs.alias_release }}
          --build-arg REPLACE_EXISTING_ARCHIVE=--replace
          .
        env:
          GITHUB_CI_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Build MacOS version
  buildMacOS:
    runs-on: macos-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.10'
          setup-python: 'false'
          modules: 'qtwebengine'
      - name: Install dependencies
        run: |
          curl -L https://bintray.com/homebrew/bottles/download_file?file_path=boost-1.74.0.high_sierra.bottle.tar.gz -o boost-1.74.0.high_sierra.bottle.tar.gz
          brew install -f boost-1.74.0.high_sierra.bottle.tar.gz
          brew install berkeley-db@4
      - name: Build MacOS binaries
        run: ./scripts/cmake-build-mac.sh -g
        env:
          MAC_QT_DIR: ${{ env.Qt5_DIR }}
          BOOST_VERSION_MAC: 1.74.0
      - name: Upload MacOS Build
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/cmake-build-cmdline-mac/aliaswallet/Alias.dmg
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Mac.dmg
          asset_content_type: application/octet-stream

  # ==========================================================================
  # Build Windows version
  buildWindows:
    runs-on: windows-latest
    needs: prepareRelease
    outputs:
      upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
      github_sha_short: ${{ needs.prepareRelease.outputs.github_sha_short }}
      alias_release: ${{ needs.prepareRelease.outputs.alias_release }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.9'
          setup-python: 'false'
          modules: 'qtwebengine'
      - name: Install vcpkg and packages with cache
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: 'berkeleydb boost leveldb openssl'
          vcpkgGitCommitId: a037d826492039db9d58af47a1e1248037d15f40
          vcpkgTriplet: x64-windows
      - name: Build Windows binaries
        run: ./scripts/cmake-build-win.bat
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows
          QTDIR: ${{ env.Qt5_Dir }}
          VSDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
          CMAKEDIR: 'C:\Program Files\CMake\bin'
          VCPKGDIR: ${{ github.workspace }}/vcpkg
      - name: Create zip archive
        run: |
          powershell Compress-Archive build/Alias Alias.zip
      - name: Upload Windows Build
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/Alias.zip
          asset_name: Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.prepareRelease.outputs.github_sha_short }}-Win64.zip
          asset_content_type: application/octet-stream

  # ==========================================================================
  # Dummy-Build A
  buildDummyA:
    runs-on: ubuntu-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v1
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Sleep 10s...
          sleep 10
          echo Now go ahead!
      - name: Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/src/qt/res/icons/alias-app.svg
          asset_name: Alias-Icon2.svg
          asset_content_type: application/octet-stream

  # ==========================================================================
  # Dummy-Build B
  buildDummyB:
    runs-on: ubuntu-latest
    needs: prepareRelease
    steps:
      - uses: actions/checkout@v1
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepareRelease.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/src/qt/res/icons/alias-app.svg
          asset_name: Alias-Icon.svg
          asset_content_type: application/octet-stream

  # ==========================================================================
  # Create Windows installer
  # Based on the content of https://github.com/aliascash/installer
  createWindowsInstaller:
    runs-on: windows-latest
    needs: buildWindows
    steps:
      # Get installer repo content
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          repository: aliascash/installer

      # Download installable content...
      - name: Download content to install
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://github.com/aliascash/alias-wallet/releases/download/${{ needs.buildWindows.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}/Alias-${{ needs.prepareRelease.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}-Win64.zip
          file-name: Alias.zip
          location: ${{ github.workspace }}

      # ... and extract it
      - name: Extract content to install
        run: 7z x -o"${{ github.workspace }}/windows/content" "${{ github.workspace }}/Alias.zip"

      # Create installer
      - name: Create Windows installer
        uses: joncloud/makensis-action@v3.4
        with:
          arguments: "/V4"
          additional-plugin-paths: "${{ github.workspace }}/windows/plugins"
          script-file: "windows/Alias.nsi"

      # Upload the installer to Github
      - name: Upload installer
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.buildWindows.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/windows/Alias-Installer.exe
          asset_name: Alias-${{ needs.buildWindows.outputs.alias_release }}-${{ needs.buildWindows.outputs.github_sha_short }}-Win64-Installer.exe
          asset_content_type: application/octet-stream
